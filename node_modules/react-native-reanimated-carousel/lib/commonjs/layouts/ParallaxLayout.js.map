{"version":3,"sources":["ParallaxLayout.tsx"],"names":["ParallaxLayout","props","handlerOffsetX","parallaxScrollingOffset","parallaxScrollingScale","index","width","height","loop","data","children","visibleRanges","vertical","React","useState","shouldUpdate","setShouldUpdate","size","x","offsetXStyle","value","translate","Extrapolate","EXTEND","zIndex","CLAMP","scale","Math","pow","transform","translateY","translateX","interpolate","updateView","useCallback","negativeRange","positiveRange","runOnJS","position"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Animated, {\n    Extrapolate,\n    interpolate,\n    runOnJS,\n    useAnimatedReaction,\n    useAnimatedStyle,\n} from 'react-native-reanimated';\nimport type { ComputedDirectionTypes } from 'src/types';\nimport { useOffsetX } from '../hooks/useOffsetX';\nimport type { IVisibleRanges } from '../hooks/useVisibleRanges';\nimport { LazyView } from '../LazyView';\n\nexport const ParallaxLayout: React.FC<\n    ComputedDirectionTypes<{\n        loop?: boolean;\n        parallaxScrollingOffset?: number;\n        parallaxScrollingScale?: number;\n        handlerOffsetX: Animated.SharedValue<number>;\n        index: number;\n        data: unknown[];\n        visibleRanges: IVisibleRanges;\n    }>\n> = (props) => {\n    const {\n        handlerOffsetX,\n        parallaxScrollingOffset = 100,\n        parallaxScrollingScale = 0.8,\n        index,\n        width,\n        height,\n        loop,\n        data,\n        children,\n        visibleRanges,\n        vertical,\n    } = props;\n\n    const [shouldUpdate, setShouldUpdate] = React.useState(false);\n\n    const size = props.vertical ? props.height : props.width;\n\n    const x = useOffsetX(\n        {\n            handlerOffsetX,\n            index,\n            size,\n            data,\n            loop,\n        },\n        visibleRanges\n    );\n\n    const offsetXStyle = useAnimatedStyle(() => {\n        const value = x.value / size;\n\n        const translate = interpolate(\n            value,\n            [-1, 0, 1],\n            [\n                -size + parallaxScrollingOffset,\n                0,\n                size - parallaxScrollingOffset,\n            ],\n            Extrapolate.EXTEND\n        );\n\n        const zIndex = interpolate(\n            value,\n            [-1, 0, 1],\n            [0, size, 0],\n            Extrapolate.CLAMP\n        );\n\n        const scale = interpolate(\n            value,\n            [-1, 0, 1],\n            [\n                Math.pow(parallaxScrollingScale, 2),\n                parallaxScrollingScale,\n                Math.pow(parallaxScrollingScale, 2),\n            ],\n            Extrapolate.CLAMP\n        );\n\n        return {\n            transform: [\n                vertical\n                    ? {\n                          translateY: translate,\n                      }\n                    : {\n                          translateX: translate,\n                      },\n                {\n                    scale,\n                },\n            ],\n            zIndex,\n        };\n    }, [loop, vertical, parallaxScrollingOffset]);\n\n    const updateView = React.useCallback(\n        (negativeRange: number[], positiveRange: number[]) => {\n            setShouldUpdate(\n                (index >= negativeRange[0] && index <= negativeRange[1]) ||\n                    (index >= positiveRange[0] && index <= positiveRange[1])\n            );\n        },\n        [index]\n    );\n\n    useAnimatedReaction(\n        () => visibleRanges.value,\n        () => {\n            runOnJS(updateView)(\n                visibleRanges.value.negativeRange,\n                visibleRanges.value.positiveRange\n            );\n        },\n        [visibleRanges.value]\n    );\n\n    return (\n        <Animated.View\n            style={[\n                {\n                    width: width || '100%',\n                    height: height || '100%',\n                    position: 'absolute',\n                },\n                offsetXStyle,\n            ]}\n        >\n            <LazyView shouldUpdate={shouldUpdate}>{children}</LazyView>\n        </Animated.View>\n    );\n};\n"]}